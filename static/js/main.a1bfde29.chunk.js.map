{"version":3,"sources":["components/cards.js","components/line_chart.js","components/bar_chart.js","App.js","index.js"],"names":["Cards","props","_this","Object","classCallCheck","this","_super","call","calc_vacc_data","bind","assertThisInitialized","vacc","latest","length","delta","type","vacc_data","data","react_default","a","createElement","id","className","onClick","customClick","dtype","dcum","concat","toLowerCase","React","Component","margin","top","right","bottom","left","width","height","color","LineChart","sel_col","parseDate","d3","yMinValue","d","yMaxValue","getX","domain","range","getY","linePath","x","y","curve","areaPath","y0","y1","viewBox","onMouseMove","e","bisect","x0","invert","ref","yAxis","tickSize","tickPadding","xAxis","tickFormat","transform","fill","opacity","strokeWidth","stroke","dy","href","target","map","item","index","key","textAnchor","cx","cy","r","style","transition","API_CUMULATIVE","require","API_TIMESERIES","API_VACCINATION","App","handleClick","state","cumulative","timeseries","vaccination","param","setState","_this2","cards","size","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a1bfde29.chunk.js","sourcesContent":["import React from 'react'\n\nclass Cards extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.calc_vacc_data = this.calc_vacc_data.bind(this)\n  }\n\n  calc_vacc_data(vacc) {\n    return {\n      'latest': vacc[vacc.length - 1]['total_vaccinations'],\n      'delta': vacc[vacc.length - 1]['total_vaccinations'] - vacc[vacc.length - 2]['total_vaccinations']\n    }\n  }\n\n  render() {\n    if(this.props.type === 'Vaccination') {\n      // Vaccination card\n      let vacc_data = this.calc_vacc_data(this.props.data)\n      return (\n        <div id=\"vaccination\" className=\"feature col\" onClick={ this.props.customClick.bind({'a': 123}) }>\n          <h2>Vaccination</h2>\n          <h4>{vacc_data['latest']}</h4>\n          <span>{vacc_data['delta']}</span>\n        </div>\n      )\n    } else {\n      // Confirmed, Active, Deceased & Recovered type of cards\n      let dtype = this.props.type\n      let dcum = this.props.data\n      let delta = `Delta_${dtype}`\n\n      return (\n        <div id={dtype.toLowerCase()} className=\"feature col\" onClick={ this.props.customClick.bind({'a': 5134}) }>\n          <h2>{dtype}</h2>\n          <h4>{dcum[dtype]}</h4>\n          <span>{dcum[delta]}</span>\n        </div>\n      )\n    }\n  }\n}\n\nexport default Cards","import React from 'react';\nimport * as d3 from 'd3';\nimport \"../css/line_chart.css\";\n\nconst margin = { top: 40, right: 80, bottom: 60, left: 50 },\n      width = 960 - margin.left - margin.right,\n      height = 280 - margin.top - margin.bottom,\n      color = \"blue\";\n\nexport default function LineChart(props) {\n  const sel_col = props.type\n  const data = props.data\n  const parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n  const yMinValue = d3.min(data, (d) => d[sel_col]),\n        yMaxValue = d3.max(data, (d) => d[sel_col]);\n\n  const getX = d3\n    .scaleTime()\n    .domain(d3.extent(data, (d) => parseDate(d['Date'])))\n    .range([0, width]);\n\n  const getY = d3\n    .scaleLinear()\n    .domain([yMinValue - 1, yMaxValue + 2])\n    .range([height, 0]);\n\n  const getXAxis = (ref) => {\n    const xAxis = d3.axisBottom(getX);\n    d3.select(ref).call(xAxis.tickFormat(d3.timeFormat(\"%b '%y\")));\n  };\n\n  const getYAxis = (ref) => {\n    const yAxis = d3.axisLeft(getY).tickSize(-width).tickPadding(15);\n    d3.select(ref).call(yAxis);\n  };\n\n  const linePath = d3\n    .line()\n    .x((d) => getX(parseDate(d['Date'])))\n    .y((d) => getY(d[sel_col]))\n    .curve(d3.curveMonotoneX)(data);\n\n  const areaPath = d3\n    .area()\n    .x((d) => getX(parseDate(d['Date'])))\n    .y0((d) => getY(d[sel_col]))\n    .y1(() => getY(yMinValue - 1))\n    .curve(d3.curveMonotoneX)(data);\n\n  const handleMouseMove = (e) => {\n    const bisect = d3.bisector((d) => parseDate(d['Date'])).left,\n          x0 = getX.invert(d3.pointer(e, this)[0]),\n          index = bisect(data, x0, 1);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <svg\n        viewBox={`0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`} onMouseMove={handleMouseMove} >\n\n        <g className=\"axis\" ref={getYAxis} />\n        <g className=\"axis xAxis\" ref={getXAxis} transform={`translate(0,${height})`} />\n\n        <path fill={color} d={areaPath} opacity={0.3} />\n        <path strokeWidth={3} fill=\"none\" stroke={color} d={linePath} />\n\n        <text transform={\"rotate(-90)\"} x={0 - height / 2} y={0 - margin.left} dy=\"1em\"># of {sel_col}</text>\n\n        <a className=\"subtitle\" href=\"github.com/open-vadodara/covid19\" target=\"_blank\">\n          <text x=\"0\" y={height + 50}>Source: covid19bharat.org</text>\n        </a>\n\n        {data.map((item, index) => {\n          return (\n            <g key={index}>\n              <text fill=\"#666\" x={getX(item['Date'])} y={getY(item[sel_col]) - 20} textAnchor=\"middle\"></text>\n              <circle\n                cx={getX(item['Date'])}\n                cy={getY(item[sel_col])}\n                r=\"2\"\n                fill={color}\n                strokeWidth=\"2\"\n                stroke=\"#fff\"\n                style={{ transition: \"ease-out .1s\" }}\n              />\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nclass BarChart extends Component {\n\n  constructor(props) {\n    super(props);\n    this.create_bar_chart = this.create_bar_chart.bind(this);\n\n    this.bar_width = 10\n    this.bar_colour = 'steelblue'\n  }\n\n  // extended components\n  componentDidMount()   { this.create_bar_chart(); }\n  componentDidUpdate()  { this.update_bar_chart(); }\n\n  create_bar_chart() {\n    const node = this.node;\n    const dataMax = d3.max(this.props.data, d => d['Confirmed']);\n    const yScale = d3.scaleLinear()\n      .domain([0, dataMax])\n      .range([0, this.props.size[1]]);\n\n    d3.select(node)\n      .selectAll('rect')\n      .data(this.props.data)\n      .enter()\n      .append('rect');\n\n    d3.select(node)\n      .selectAll('rect')\n      .data(this.props.data)\n        .style('fill', this.bar_colour)\n        // .attr('x', (d, i) => i * 25)\n        .attr('x', (d, i) => i * this.bar_width)\n        .attr('y', d => this.props.size[1] - yScale(d))\n        .attr('height', d => yScale(d['Confirmed']))\n        .attr('width', this.bar_width)\n        .attr('id', (d, i) => i);\n\n    d3.select(node)\n      .selectAll('text')\n      .data(this.props.data)\n      .enter()\n      .append('text')\n      .attr('x', (d, i) => i * this.bar_width + 3)\n      .attr('y', d => this.props.size[1] - yScale(d['Confirmed']) + 18)\n      .style('fill', this.bar_colour)\n      .text((d) => d['Confirmed']);\n\n  }\n\n  update_bar_chart() {\n    const node = this.node;\n    const dataMax = d3.max(this.props.data, d => d['Confirmed']);\n    const yScale = d3.scaleLinear()\n      .domain([0, dataMax])\n      .range([0, this.props.size[1]]);\n\n    d3.select(node)\n      .selectAll('rect')\n      .data(this.props.data)\n      .style('fill', this.bar_colour)\n      .transition()\n      .attr('x', (d, i) => i * this.bar_width)\n      .attr('y', d => this.props.size[1] - yScale(d['Confirmed']))\n      .attr('height', d => yScale(d['Confirmed']))\n      .attr('width', this.bar_width);\n\n    d3.select(node)\n      .selectAll('text')\n      .data(this.props.data)\n      .transition()\n      .attr('x', (d, i) => i * this.bar_width + 3)\n      .attr('y', d => this.props.size[1] - yScale(d['Confirmed']) + 18)\n      .style('fill', this.bar_colour)\n      .text((d) => d);\n\n    for(let start = 0; start < this.props.meta[0]; start++) {\n      d3.select(node).select(`rect[id='${start}']`).style('fill', '#FDCD3D');\n    }\n\n    // d3.select(node).select(`rect[id='${this.props.meta[0]}']`).style('fill', '#8D2BFF');\n    // d3.select(node).select(`rect[id='${this.props.meta[1]}']`).style('fill', '#0D8EFF');\n  }\n\n  render() {\n    return(\n      <div className=\"visualisation\">\n        <svg ref={node => this.node = node} preserveAspectRatio=\"xMidYMin\" viewBox=\"0 0 1500 500\" shapeRendering=\"crispEdges\"/>\n      </div>\n    );\n  }\n\n}\n\nexport default BarChart;","import React from 'react';\nimport Cards from './components/cards';\nimport BarChart from './components/bar_chart';\nimport LineChart from './components/line_chart';\nimport './App.css';\n\nconst API_CUMULATIVE = require('./data/cumulative.json')\nconst API_TIMESERIES = require('./data/timeseries.json')\nconst API_VACCINATION = require('./data/vaccination_js.json')\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleClick = this.handleClick.bind(this)\n\n    // maintain data from API in states & pass it to cards using props\n    this.state = {\n      'cumulative': API_CUMULATIVE['cumulative'][0],\n      'timeseries': API_TIMESERIES['timeseries'],\n      'vaccination': API_VACCINATION['vaccination'],\n      'sel_col': 'Confirmed'\n    }\n  }\n\n  handleClick(param) {\n    this.setState({\n      'sel_col': param\n    })\n  }\n\n  render() {\n    return (\n      <div className='container px-4 py-5' id='featured-5'>\n        <div id='topcards' className='row g-4 py-5 row-cols-1 row-cols-lg-5'>\n          <Cards type='Confirmed' data={this.state['cumulative']} customClick={ () => this.handleClick('Confirmed') } />\n          <Cards type='Active' data={this.state['cumulative']} customClick={ () => this.handleClick('Active') } />\n          <Cards type='Recovered' data={this.state['cumulative']} customClick={ () => this.handleClick('Recovered') } />\n          <Cards type='Deceased' data={this.state['cumulative']} customClick={ () => this.handleClick('Deceased') } />\n          <Cards type='Vaccination' data={this.state['vaccination']} customClick={ () => this.handleClick('Vaccination') } />\n        </div>\n\n        <div className='b-example-divider'></div>\n\n        <div className='row g-5'>\n          <div className='col-md-10'>\n            <h2>Cumulative timeline</h2>\n            {/*<BarChart data={ this.state['timeseries'] } size={ [500, 500] } />*/}\n            <LineChart data={ API_TIMESERIES['timeseries'] } type={ this.state['sel_col'] } size={ [500, 500] } />\n          </div>\n\n          <div className='col-md-2'>\n            <h2>Delta timeline</h2>\n            <svg id='svg_delta_timeline'></svg>\n            <p>adf asdf </p>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}